//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message.proto

package grpc_code_gen.chat.message;

@kotlin.jvm.JvmName("-initializemessageReply")
public inline fun messageReply(block: grpc_code_gen.chat.message.MessageReplyKt.Dsl.() -> kotlin.Unit): grpc_code_gen.chat.message.Message.MessageReply =
  grpc_code_gen.chat.message.MessageReplyKt.Dsl._create(grpc_code_gen.chat.message.Message.MessageReply.newBuilder()).apply { block() }._build()
public object MessageReplyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: grpc_code_gen.chat.message.Message.MessageReply.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: grpc_code_gen.chat.message.Message.MessageReply.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): grpc_code_gen.chat.message.Message.MessageReply = _builder.build()

    /**
     * <code>int64 msg_id = 1;</code>
     */
    public var msgId: kotlin.Long
      @JvmName("getMsgId")
      get() = _builder.getMsgId()
      @JvmName("setMsgId")
      set(value) {
        _builder.setMsgId(value)
      }
    /**
     * <code>int64 msg_id = 1;</code>
     */
    public fun clearMsgId() {
      _builder.clearMsgId()
    }

    /**
     * <pre>
     *所属者id
     * </pre>
     *
     * <code>int64 uid = 2;</code>
     */
    public var uid: kotlin.Long
      @JvmName("getUid")
      get() = _builder.getUid()
      @JvmName("setUid")
      set(value) {
        _builder.setUid(value)
      }
    /**
     * <pre>
     *所属者id
     * </pre>
     *
     * <code>int64 uid = 2;</code>
     */
    public fun clearUid() {
      _builder.clearUid()
    }

    /**
     * <pre>
     *区分是否是自己发送消息 1-是 0-否
     * </pre>
     *
     * <code>bool is_me = 3;</code>
     */
    public var isMe: kotlin.Boolean
      @JvmName("getIsMe")
      get() = _builder.getIsMe()
      @JvmName("setIsMe")
      set(value) {
        _builder.setIsMe(value)
      }
    /**
     * <pre>
     *区分是否是自己发送消息 1-是 0-否
     * </pre>
     *
     * <code>bool is_me = 3;</code>
     */
    public fun clearIsMe() {
      _builder.clearIsMe()
    }

    /**
     * <pre>
     *消息发送者id
     * </pre>
     *
     * <code>int64 from = 4;</code>
     */
    public var from: kotlin.Long
      @JvmName("getFrom")
      get() = _builder.getFrom()
      @JvmName("setFrom")
      set(value) {
        _builder.setFrom(value)
      }
    /**
     * <pre>
     *消息发送者id
     * </pre>
     *
     * <code>int64 from = 4;</code>
     */
    public fun clearFrom() {
      _builder.clearFrom()
    }

    /**
     * <pre>
     *消息发送者名称
     * </pre>
     *
     * <code>string from_name = 5;</code>
     */
    public var fromName: kotlin.String
      @JvmName("getFromName")
      get() = _builder.getFromName()
      @JvmName("setFromName")
      set(value) {
        _builder.setFromName(value)
      }
    /**
     * <pre>
     *消息发送者名称
     * </pre>
     *
     * <code>string from_name = 5;</code>
     */
    public fun clearFromName() {
      _builder.clearFromName()
    }

    /**
     * <pre>
     *消息接收者id
     * </pre>
     *
     * <code>int64 to = 6;</code>
     */
    public var to: kotlin.Long
      @JvmName("getTo")
      get() = _builder.getTo()
      @JvmName("setTo")
      set(value) {
        _builder.setTo(value)
      }
    /**
     * <pre>
     *消息接收者id
     * </pre>
     *
     * <code>int64 to = 6;</code>
     */
    public fun clearTo() {
      _builder.clearTo()
    }

    /**
     * <pre>
     *消息接收者名称
     * </pre>
     *
     * <code>string to_name = 7;</code>
     */
    public var toName: kotlin.String
      @JvmName("getToName")
      get() = _builder.getToName()
      @JvmName("setToName")
      set(value) {
        _builder.setToName(value)
      }
    /**
     * <pre>
     *消息接收者名称
     * </pre>
     *
     * <code>string to_name = 7;</code>
     */
    public fun clearToName() {
      _builder.clearToName()
    }

    /**
     * <pre>
     *会话类型 0-个人 1-群组 3-系统
     * </pre>
     *
     * <code>int32 chat_type = 8;</code>
     */
    public var chatType: kotlin.Int
      @JvmName("getChatType")
      get() = _builder.getChatType()
      @JvmName("setChatType")
      set(value) {
        _builder.setChatType(value)
      }
    /**
     * <pre>
     *会话类型 0-个人 1-群组 3-系统
     * </pre>
     *
     * <code>int32 chat_type = 8;</code>
     */
    public fun clearChatType() {
      _builder.clearChatType()
    }

    /**
     * <pre>
     *消息类型 文字/图片/文件/音乐
     * </pre>
     *
     * <code>int32 msg_type = 9;</code>
     */
    public var msgType: kotlin.Int
      @JvmName("getMsgType")
      get() = _builder.getMsgType()
      @JvmName("setMsgType")
      set(value) {
        _builder.setMsgType(value)
      }
    /**
     * <pre>
     *消息类型 文字/图片/文件/音乐
     * </pre>
     *
     * <code>int32 msg_type = 9;</code>
     */
    public fun clearMsgType() {
      _builder.clearMsgType()
    }

    /**
     * <pre>
     *消息内容
     * </pre>
     *
     * <code>string msg = 10;</code>
     */
    public var msg: kotlin.String
      @JvmName("getMsg")
      get() = _builder.getMsg()
      @JvmName("setMsg")
      set(value) {
        _builder.setMsg(value)
      }
    /**
     * <pre>
     *消息内容
     * </pre>
     *
     * <code>string msg = 10;</code>
     */
    public fun clearMsg() {
      _builder.clearMsg()
    }

    /**
     * <pre>
     *消息发送时间
     * </pre>
     *
     * <code>string send_time = 11;</code>
     */
    public var sendTime: kotlin.String
      @JvmName("getSendTime")
      get() = _builder.getSendTime()
      @JvmName("setSendTime")
      set(value) {
        _builder.setSendTime(value)
      }
    /**
     * <pre>
     *消息发送时间
     * </pre>
     *
     * <code>string send_time = 11;</code>
     */
    public fun clearSendTime() {
      _builder.clearSendTime()
    }

    /**
     * <pre>
     *消息状态 发送中，发送完成，发送失败
     * </pre>
     *
     * <code>int32 send_status = 12;</code>
     */
    public var sendStatus: kotlin.Int
      @JvmName("getSendStatus")
      get() = _builder.getSendStatus()
      @JvmName("setSendStatus")
      set(value) {
        _builder.setSendStatus(value)
      }
    /**
     * <pre>
     *消息状态 发送中，发送完成，发送失败
     * </pre>
     *
     * <code>int32 send_status = 12;</code>
     */
    public fun clearSendStatus() {
      _builder.clearSendStatus()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun grpc_code_gen.chat.message.Message.MessageReply.copy(block: grpc_code_gen.chat.message.MessageReplyKt.Dsl.() -> kotlin.Unit): grpc_code_gen.chat.message.Message.MessageReply =
  grpc_code_gen.chat.message.MessageReplyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

